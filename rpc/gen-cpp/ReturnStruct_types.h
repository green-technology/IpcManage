/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReturnStruct_TYPES_H
#define ReturnStruct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ipcms {

class UserLoginReturnStruct;

class ResourceInfoReturnStruct;

class ApplyPTZControlReturnStruct;

class RequestPTZControlReturnStruct;

typedef struct _UserLoginReturnStruct__isset {
  _UserLoginReturnStruct__isset() : ErrorNum(false), UserID(false), SessionID(false) {}
  bool ErrorNum :1;
  bool UserID :1;
  bool SessionID :1;
} _UserLoginReturnStruct__isset;

class UserLoginReturnStruct {
 public:

  static const char* ascii_fingerprint; // = "15B1A498AD6EEF5345D267BE66D87AFD";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xB1,0xA4,0x98,0xAD,0x6E,0xEF,0x53,0x45,0xD2,0x67,0xBE,0x66,0xD8,0x7A,0xFD};

  UserLoginReturnStruct(const UserLoginReturnStruct&);
  UserLoginReturnStruct& operator=(const UserLoginReturnStruct&);
  UserLoginReturnStruct() : ErrorNum(0), UserID(), SessionID() {
  }

  virtual ~UserLoginReturnStruct() throw();
  int8_t ErrorNum;
  std::string UserID;
  std::string SessionID;

  _UserLoginReturnStruct__isset __isset;

  void __set_ErrorNum(const int8_t val);

  void __set_UserID(const std::string& val);

  void __set_SessionID(const std::string& val);

  bool operator == (const UserLoginReturnStruct & rhs) const
  {
    if (!(ErrorNum == rhs.ErrorNum))
      return false;
    if (!(UserID == rhs.UserID))
      return false;
    if (!(SessionID == rhs.SessionID))
      return false;
    return true;
  }
  bool operator != (const UserLoginReturnStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLoginReturnStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserLoginReturnStruct& obj);
};

void swap(UserLoginReturnStruct &a, UserLoginReturnStruct &b);

typedef struct _ResourceInfoReturnStruct__isset {
  _ResourceInfoReturnStruct__isset() : length(false), hResource(false), hasPLZ(false), timeStart(false), timeEnd(false), nameLength(false) {}
  bool length :1;
  bool hResource :1;
  bool hasPLZ :1;
  bool timeStart :1;
  bool timeEnd :1;
  bool nameLength :1;
} _ResourceInfoReturnStruct__isset;

class ResourceInfoReturnStruct {
 public:

  static const char* ascii_fingerprint; // = "DC7B5F9F55550684275623CB722904E8";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x7B,0x5F,0x9F,0x55,0x55,0x06,0x84,0x27,0x56,0x23,0xCB,0x72,0x29,0x04,0xE8};

  ResourceInfoReturnStruct(const ResourceInfoReturnStruct&);
  ResourceInfoReturnStruct& operator=(const ResourceInfoReturnStruct&);
  ResourceInfoReturnStruct() : length(0), hResource(0), hasPLZ(0), timeStart(0), timeEnd(0), nameLength(0) {
  }

  virtual ~ResourceInfoReturnStruct() throw();
  int64_t length;
  int64_t hResource;
  bool hasPLZ;
  int64_t timeStart;
  int64_t timeEnd;
  int64_t nameLength;

  _ResourceInfoReturnStruct__isset __isset;

  void __set_length(const int64_t val);

  void __set_hResource(const int64_t val);

  void __set_hasPLZ(const bool val);

  void __set_timeStart(const int64_t val);

  void __set_timeEnd(const int64_t val);

  void __set_nameLength(const int64_t val);

  bool operator == (const ResourceInfoReturnStruct & rhs) const
  {
    if (!(length == rhs.length))
      return false;
    if (!(hResource == rhs.hResource))
      return false;
    if (!(hasPLZ == rhs.hasPLZ))
      return false;
    if (!(timeStart == rhs.timeStart))
      return false;
    if (!(timeEnd == rhs.timeEnd))
      return false;
    if (!(nameLength == rhs.nameLength))
      return false;
    return true;
  }
  bool operator != (const ResourceInfoReturnStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceInfoReturnStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ResourceInfoReturnStruct& obj);
};

void swap(ResourceInfoReturnStruct &a, ResourceInfoReturnStruct &b);

typedef struct _ApplyPTZControlReturnStruct__isset {
  _ApplyPTZControlReturnStruct__isset() : hPLZ(false), result(false), userName(false) {}
  bool hPLZ :1;
  bool result :1;
  bool userName :1;
} _ApplyPTZControlReturnStruct__isset;

class ApplyPTZControlReturnStruct {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  ApplyPTZControlReturnStruct(const ApplyPTZControlReturnStruct&);
  ApplyPTZControlReturnStruct& operator=(const ApplyPTZControlReturnStruct&);
  ApplyPTZControlReturnStruct() : hPLZ(0), result(0), userName() {
  }

  virtual ~ApplyPTZControlReturnStruct() throw();
  int64_t hPLZ;
  int64_t result;
  std::string userName;

  _ApplyPTZControlReturnStruct__isset __isset;

  void __set_hPLZ(const int64_t val);

  void __set_result(const int64_t val);

  void __set_userName(const std::string& val);

  bool operator == (const ApplyPTZControlReturnStruct & rhs) const
  {
    if (!(hPLZ == rhs.hPLZ))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const ApplyPTZControlReturnStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyPTZControlReturnStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApplyPTZControlReturnStruct& obj);
};

void swap(ApplyPTZControlReturnStruct &a, ApplyPTZControlReturnStruct &b);

typedef struct _RequestPTZControlReturnStruct__isset {
  _RequestPTZControlReturnStruct__isset() : hPTZ(false), result(false), userName(false) {}
  bool hPTZ :1;
  bool result :1;
  bool userName :1;
} _RequestPTZControlReturnStruct__isset;

class RequestPTZControlReturnStruct {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  RequestPTZControlReturnStruct(const RequestPTZControlReturnStruct&);
  RequestPTZControlReturnStruct& operator=(const RequestPTZControlReturnStruct&);
  RequestPTZControlReturnStruct() : hPTZ(0), result(0), userName() {
  }

  virtual ~RequestPTZControlReturnStruct() throw();
  int64_t hPTZ;
  int64_t result;
  std::string userName;

  _RequestPTZControlReturnStruct__isset __isset;

  void __set_hPTZ(const int64_t val);

  void __set_result(const int64_t val);

  void __set_userName(const std::string& val);

  bool operator == (const RequestPTZControlReturnStruct & rhs) const
  {
    if (!(hPTZ == rhs.hPTZ))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RequestPTZControlReturnStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPTZControlReturnStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RequestPTZControlReturnStruct& obj);
};

void swap(RequestPTZControlReturnStruct &a, RequestPTZControlReturnStruct &b);

} // namespace

#endif
