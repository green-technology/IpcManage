/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MediaManagerStruct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ipcms {


IPCResourceDataPacket::~IPCResourceDataPacket() throw() {
}


void IPCResourceDataPacket::__set_IP(const std::string& val) {
  this->IP = val;
}

void IPCResourceDataPacket::__set_port(const int64_t val) {
  this->port = val;
}

void IPCResourceDataPacket::__set_DeviceType(const int64_t val) {
  this->DeviceType = val;
}

void IPCResourceDataPacket::__set_userName(const std::string& val) {
  this->userName = val;
}

void IPCResourceDataPacket::__set_password(const std::string& val) {
  this->password = val;
}

void IPCResourceDataPacket::__set_channel(const int64_t val) {
  this->channel = val;
}

void IPCResourceDataPacket::__set_hPTZ(const int64_t val) {
  this->hPTZ = val;
}

const char* IPCResourceDataPacket::ascii_fingerprint = "DBBAE5A11D7F952B2D5DB9AC397B711D";
const uint8_t IPCResourceDataPacket::binary_fingerprint[16] = {0xDB,0xBA,0xE5,0xA1,0x1D,0x7F,0x95,0x2B,0x2D,0x5D,0xB9,0xAC,0x39,0x7B,0x71,0x1D};

uint32_t IPCResourceDataPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IP);
          this->__isset.IP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->DeviceType);
          this->__isset.DeviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->channel);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hPTZ);
          this->__isset.hPTZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IPCResourceDataPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IPCResourceDataPacket");

  xfer += oprot->writeFieldBegin("IP", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->IP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DeviceType", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->DeviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->channel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hPTZ", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->hPTZ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IPCResourceDataPacket &a, IPCResourceDataPacket &b) {
  using ::std::swap;
  swap(a.IP, b.IP);
  swap(a.port, b.port);
  swap(a.DeviceType, b.DeviceType);
  swap(a.userName, b.userName);
  swap(a.password, b.password);
  swap(a.channel, b.channel);
  swap(a.hPTZ, b.hPTZ);
  swap(a.__isset, b.__isset);
}

IPCResourceDataPacket::IPCResourceDataPacket(const IPCResourceDataPacket& other0) {
  IP = other0.IP;
  port = other0.port;
  DeviceType = other0.DeviceType;
  userName = other0.userName;
  password = other0.password;
  channel = other0.channel;
  hPTZ = other0.hPTZ;
  __isset = other0.__isset;
}
IPCResourceDataPacket& IPCResourceDataPacket::operator=(const IPCResourceDataPacket& other1) {
  IP = other1.IP;
  port = other1.port;
  DeviceType = other1.DeviceType;
  userName = other1.userName;
  password = other1.password;
  channel = other1.channel;
  hPTZ = other1.hPTZ;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IPCResourceDataPacket& obj) {
  using apache::thrift::to_string;
  out << "IPCResourceDataPacket(";
  out << "IP=" << to_string(obj.IP);
  out << ", " << "port=" << to_string(obj.port);
  out << ", " << "DeviceType=" << to_string(obj.DeviceType);
  out << ", " << "userName=" << to_string(obj.userName);
  out << ", " << "password=" << to_string(obj.password);
  out << ", " << "channel=" << to_string(obj.channel);
  out << ", " << "hPTZ=" << to_string(obj.hPTZ);
  out << ")";
  return out;
}

} // namespace
