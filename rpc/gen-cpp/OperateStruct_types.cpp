/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "OperateStruct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ipcms {

int _kPTZCommandValues[] = {
  PTZCommand::PTZ_UP,
  PTZCommand::PTZ_DOWN,
  PTZCommand::PTZ_LEFT,
  PTZCommand::PTZ_RIGHT,
  PTZCommand::PTZ_ZOOM_ADD,
  PTZCommand::PTZ_ZOOM_DEC,
  PTZCommand::PTZ_FOCUS_ADD,
  PTZCommand::PTZ_FOCUS_DEC,
  PTZCommand::PTZ_APERTURE_ADD,
  PTZCommand::PTZ_APERTURE_DEC,
  PTZCommand::PTZ_POINT_MOVE,
  PTZCommand::PTZ_POINT_SET,
  PTZCommand::PTZ_LAMP_OPEN,
  PTZCommand::PTZ_LAMP_CLOSE,
  PTZCommand::PTZ_WIPER_OPEN,
  PTZCommand::PTZ_WIPER_CLOSE,
  PTZCommand::PTZ_THROUGHFOG_OPEN,
  PTZCommand::PTZ_THROUGHFOG_CLOSE,
  PTZCommand::PTZ_DEV_OPEN,
  PTZCommand::PTZ_DEV_CLOSE,
  PTZCommand::PTZ_LEFTUP,
  PTZCommand::PTZ_RIGHTUP,
  PTZCommand::PTZ_LEFTDOWN,
  PTZCommand::PTZ_RIGHTDOWN,
  PTZCommand::PTZ_MAX_COMMAND
};
const char* _kPTZCommandNames[] = {
  "PTZ_UP",
  "PTZ_DOWN",
  "PTZ_LEFT",
  "PTZ_RIGHT",
  "PTZ_ZOOM_ADD",
  "PTZ_ZOOM_DEC",
  "PTZ_FOCUS_ADD",
  "PTZ_FOCUS_DEC",
  "PTZ_APERTURE_ADD",
  "PTZ_APERTURE_DEC",
  "PTZ_POINT_MOVE",
  "PTZ_POINT_SET",
  "PTZ_LAMP_OPEN",
  "PTZ_LAMP_CLOSE",
  "PTZ_WIPER_OPEN",
  "PTZ_WIPER_CLOSE",
  "PTZ_THROUGHFOG_OPEN",
  "PTZ_THROUGHFOG_CLOSE",
  "PTZ_DEV_OPEN",
  "PTZ_DEV_CLOSE",
  "PTZ_LEFTUP",
  "PTZ_RIGHTUP",
  "PTZ_LEFTDOWN",
  "PTZ_RIGHTDOWN",
  "PTZ_MAX_COMMAND"
};
const std::map<int, const char*> _PTZCommand_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(25, _kPTZCommandValues, _kPTZCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UserVerificationDataPacket::~UserVerificationDataPacket() throw() {
}


void UserVerificationDataPacket::__set_UserID(const std::string& val) {
  this->UserID = val;
}

void UserVerificationDataPacket::__set_SessionID(const std::string& val) {
  this->SessionID = val;
}

const char* UserVerificationDataPacket::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t UserVerificationDataPacket::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t UserVerificationDataPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UserID = false;
  bool isset_SessionID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserID);
          isset_UserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SessionID);
          isset_SessionID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UserID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_SessionID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserVerificationDataPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserVerificationDataPacket");

  xfer += oprot->writeFieldBegin("UserID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UserID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SessionID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->SessionID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserVerificationDataPacket &a, UserVerificationDataPacket &b) {
  using ::std::swap;
  swap(a.UserID, b.UserID);
  swap(a.SessionID, b.SessionID);
}

UserVerificationDataPacket::UserVerificationDataPacket(const UserVerificationDataPacket& other0) {
  UserID = other0.UserID;
  SessionID = other0.SessionID;
}
UserVerificationDataPacket& UserVerificationDataPacket::operator=(const UserVerificationDataPacket& other1) {
  UserID = other1.UserID;
  SessionID = other1.SessionID;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserVerificationDataPacket& obj) {
  using apache::thrift::to_string;
  out << "UserVerificationDataPacket(";
  out << "UserID=" << to_string(obj.UserID);
  out << ", " << "SessionID=" << to_string(obj.SessionID);
  out << ")";
  return out;
}


PlayVideoDataPacket::~PlayVideoDataPacket() throw() {
}


void PlayVideoDataPacket::__set_hResource(const int64_t val) {
  this->hResource = val;
}

void PlayVideoDataPacket::__set_time(const int64_t val) {
  this->time = val;
}

void PlayVideoDataPacket::__set_speed(const int32_t val) {
  this->speed = val;
}

const char* PlayVideoDataPacket::ascii_fingerprint = "9763B9D124C8339490EA9AA9EB582188";
const uint8_t PlayVideoDataPacket::binary_fingerprint[16] = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

uint32_t PlayVideoDataPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hResource);
          this->__isset.hResource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayVideoDataPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PlayVideoDataPacket");

  xfer += oprot->writeFieldBegin("hResource", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hResource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PlayVideoDataPacket &a, PlayVideoDataPacket &b) {
  using ::std::swap;
  swap(a.hResource, b.hResource);
  swap(a.time, b.time);
  swap(a.speed, b.speed);
  swap(a.__isset, b.__isset);
}

PlayVideoDataPacket::PlayVideoDataPacket(const PlayVideoDataPacket& other2) {
  hResource = other2.hResource;
  time = other2.time;
  speed = other2.speed;
  __isset = other2.__isset;
}
PlayVideoDataPacket& PlayVideoDataPacket::operator=(const PlayVideoDataPacket& other3) {
  hResource = other3.hResource;
  time = other3.time;
  speed = other3.speed;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PlayVideoDataPacket& obj) {
  using apache::thrift::to_string;
  out << "PlayVideoDataPacket(";
  out << "hResource=" << to_string(obj.hResource);
  out << ", " << "time=" << to_string(obj.time);
  out << ", " << "speed=" << to_string(obj.speed);
  out << ")";
  return out;
}


RequestPTZControlDataPacket::~RequestPTZControlDataPacket() throw() {
}


void RequestPTZControlDataPacket::__set_hResource(const int64_t val) {
  this->hResource = val;
}

const char* RequestPTZControlDataPacket::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t RequestPTZControlDataPacket::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t RequestPTZControlDataPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hResource);
          this->__isset.hResource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestPTZControlDataPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RequestPTZControlDataPacket");

  xfer += oprot->writeFieldBegin("hResource", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hResource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RequestPTZControlDataPacket &a, RequestPTZControlDataPacket &b) {
  using ::std::swap;
  swap(a.hResource, b.hResource);
  swap(a.__isset, b.__isset);
}

RequestPTZControlDataPacket::RequestPTZControlDataPacket(const RequestPTZControlDataPacket& other4) {
  hResource = other4.hResource;
  __isset = other4.__isset;
}
RequestPTZControlDataPacket& RequestPTZControlDataPacket::operator=(const RequestPTZControlDataPacket& other5) {
  hResource = other5.hResource;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RequestPTZControlDataPacket& obj) {
  using apache::thrift::to_string;
  out << "RequestPTZControlDataPacket(";
  out << "hResource=" << to_string(obj.hResource);
  out << ")";
  return out;
}


PTZControlDataPacket::~PTZControlDataPacket() throw() {
}


void PTZControlDataPacket::__set_hPTZ(const int64_t val) {
  this->hPTZ = val;
}

void PTZControlDataPacket::__set_command(const PTZCommand::type val) {
  this->command = val;
__isset.command = true;
}

void PTZControlDataPacket::__set_param1(const int64_t val) {
  this->param1 = val;
}

void PTZControlDataPacket::__set_param2(const int64_t val) {
  this->param2 = val;
}

void PTZControlDataPacket::__set_param3(const int64_t val) {
  this->param3 = val;
}

void PTZControlDataPacket::__set_dwStop(const bool val) {
  this->dwStop = val;
}

const char* PTZControlDataPacket::ascii_fingerprint = "DD286DAE592A0D22FD0D778DC127B125";
const uint8_t PTZControlDataPacket::binary_fingerprint[16] = {0xDD,0x28,0x6D,0xAE,0x59,0x2A,0x0D,0x22,0xFD,0x0D,0x77,0x8D,0xC1,0x27,0xB1,0x25};

uint32_t PTZControlDataPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hPTZ);
          this->__isset.hPTZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->command = (PTZCommand::type)ecast6;
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dwStop);
          this->__isset.dwStop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PTZControlDataPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PTZControlDataPacket");

  xfer += oprot->writeFieldBegin("hPTZ", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hPTZ);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.command) {
    xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->command);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dwStop", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->dwStop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PTZControlDataPacket &a, PTZControlDataPacket &b) {
  using ::std::swap;
  swap(a.hPTZ, b.hPTZ);
  swap(a.command, b.command);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.dwStop, b.dwStop);
  swap(a.__isset, b.__isset);
}

PTZControlDataPacket::PTZControlDataPacket(const PTZControlDataPacket& other7) {
  hPTZ = other7.hPTZ;
  command = other7.command;
  param1 = other7.param1;
  param2 = other7.param2;
  param3 = other7.param3;
  dwStop = other7.dwStop;
  __isset = other7.__isset;
}
PTZControlDataPacket& PTZControlDataPacket::operator=(const PTZControlDataPacket& other8) {
  hPTZ = other8.hPTZ;
  command = other8.command;
  param1 = other8.param1;
  param2 = other8.param2;
  param3 = other8.param3;
  dwStop = other8.dwStop;
  __isset = other8.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PTZControlDataPacket& obj) {
  using apache::thrift::to_string;
  out << "PTZControlDataPacket(";
  out << "hPTZ=" << to_string(obj.hPTZ);
  out << ", " << "command="; (obj.__isset.command ? (out << to_string(obj.command)) : (out << "<null>"));
  out << ", " << "param1=" << to_string(obj.param1);
  out << ", " << "param2=" << to_string(obj.param2);
  out << ", " << "param3=" << to_string(obj.param3);
  out << ", " << "dwStop=" << to_string(obj.dwStop);
  out << ")";
  return out;
}

} // namespace
