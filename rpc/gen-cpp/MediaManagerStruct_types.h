/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MediaManagerStruct_TYPES_H
#define MediaManagerStruct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ipcms {

class IPCResourceDataPacket;

typedef struct _IPCResourceDataPacket__isset {
  _IPCResourceDataPacket__isset() : IP(false), port(false), DeviceType(false), userName(false), password(false), channel(false), hPTZ(false) {}
  bool IP :1;
  bool port :1;
  bool DeviceType :1;
  bool userName :1;
  bool password :1;
  bool channel :1;
  bool hPTZ :1;
} _IPCResourceDataPacket__isset;

class IPCResourceDataPacket {
 public:

  static const char* ascii_fingerprint; // = "DBBAE5A11D7F952B2D5DB9AC397B711D";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xBA,0xE5,0xA1,0x1D,0x7F,0x95,0x2B,0x2D,0x5D,0xB9,0xAC,0x39,0x7B,0x71,0x1D};

  IPCResourceDataPacket(const IPCResourceDataPacket&);
  IPCResourceDataPacket& operator=(const IPCResourceDataPacket&);
  IPCResourceDataPacket() : IP(), port(0), DeviceType(0), userName(), password(), channel(0), hPTZ(0) {
  }

  virtual ~IPCResourceDataPacket() throw();
  std::string IP;
  int64_t port;
  int64_t DeviceType;
  std::string userName;
  std::string password;
  int64_t channel;
  int64_t hPTZ;

  _IPCResourceDataPacket__isset __isset;

  void __set_IP(const std::string& val);

  void __set_port(const int64_t val);

  void __set_DeviceType(const int64_t val);

  void __set_userName(const std::string& val);

  void __set_password(const std::string& val);

  void __set_channel(const int64_t val);

  void __set_hPTZ(const int64_t val);

  bool operator == (const IPCResourceDataPacket & rhs) const
  {
    if (!(IP == rhs.IP))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(DeviceType == rhs.DeviceType))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (!(hPTZ == rhs.hPTZ))
      return false;
    return true;
  }
  bool operator != (const IPCResourceDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPCResourceDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPCResourceDataPacket& obj);
};

void swap(IPCResourceDataPacket &a, IPCResourceDataPacket &b);

} // namespace

#endif
