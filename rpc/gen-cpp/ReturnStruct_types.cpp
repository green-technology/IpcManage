/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ReturnStruct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ipcms {

int _kResourceTypeValues[] = {
  ResourceType::ResourceTypeALL,
  ResourceType::ResourceTypeReplay,
  ResourceType::ResourceTypeIPC
};
const char* _kResourceTypeNames[] = {
  "ResourceTypeALL",
  "ResourceTypeReplay",
  "ResourceTypeIPC"
};
const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResourceTypeValues, _kResourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPTZControlReturnTypeValues[] = {
  PTZControlReturnType::PTZControlReturnTypeInvalidHandle,
  PTZControlReturnType::PTZControlReturnTypeSuccess,
  PTZControlReturnType::PTZControlReturnTypeError
};
const char* _kPTZControlReturnTypeNames[] = {
  "PTZControlReturnTypeInvalidHandle",
  "PTZControlReturnTypeSuccess",
  "PTZControlReturnTypeError"
};
const std::map<int, const char*> _PTZControlReturnType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPTZControlReturnTypeValues, _kPTZControlReturnTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UserLoginReturnStruct::~UserLoginReturnStruct() throw() {
}


void UserLoginReturnStruct::__set_ErrorNum(const int8_t val) {
  this->ErrorNum = val;
}

void UserLoginReturnStruct::__set_UserID(const std::string& val) {
  this->UserID = val;
}

void UserLoginReturnStruct::__set_SessionID(const std::string& val) {
  this->SessionID = val;
}

const char* UserLoginReturnStruct::ascii_fingerprint = "15B1A498AD6EEF5345D267BE66D87AFD";
const uint8_t UserLoginReturnStruct::binary_fingerprint[16] = {0x15,0xB1,0xA4,0x98,0xAD,0x6E,0xEF,0x53,0x45,0xD2,0x67,0xBE,0x66,0xD8,0x7A,0xFD};

uint32_t UserLoginReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ErrorNum);
          this->__isset.ErrorNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserID);
          this->__isset.UserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SessionID);
          this->__isset.SessionID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserLoginReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserLoginReturnStruct");

  xfer += oprot->writeFieldBegin("ErrorNum", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->ErrorNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SessionID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->SessionID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserLoginReturnStruct &a, UserLoginReturnStruct &b) {
  using ::std::swap;
  swap(a.ErrorNum, b.ErrorNum);
  swap(a.UserID, b.UserID);
  swap(a.SessionID, b.SessionID);
  swap(a.__isset, b.__isset);
}

UserLoginReturnStruct::UserLoginReturnStruct(const UserLoginReturnStruct& other0) {
  ErrorNum = other0.ErrorNum;
  UserID = other0.UserID;
  SessionID = other0.SessionID;
  __isset = other0.__isset;
}
UserLoginReturnStruct& UserLoginReturnStruct::operator=(const UserLoginReturnStruct& other1) {
  ErrorNum = other1.ErrorNum;
  UserID = other1.UserID;
  SessionID = other1.SessionID;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserLoginReturnStruct& obj) {
  using apache::thrift::to_string;
  out << "UserLoginReturnStruct(";
  out << "ErrorNum=" << to_string(obj.ErrorNum);
  out << ", " << "UserID=" << to_string(obj.UserID);
  out << ", " << "SessionID=" << to_string(obj.SessionID);
  out << ")";
  return out;
}


ResourceInfoReturnStruct::~ResourceInfoReturnStruct() throw() {
}


void ResourceInfoReturnStruct::__set_resourceType(const ResourceType::type val) {
  this->resourceType = val;
__isset.resourceType = true;
}

void ResourceInfoReturnStruct::__set_hResource(const int64_t val) {
  this->hResource = val;
}

void ResourceInfoReturnStruct::__set_hasPLZ(const bool val) {
  this->hasPLZ = val;
}

void ResourceInfoReturnStruct::__set_timeStart(const int64_t val) {
  this->timeStart = val;
}

void ResourceInfoReturnStruct::__set_timeEnd(const int64_t val) {
  this->timeEnd = val;
}

void ResourceInfoReturnStruct::__set_nameLength(const int64_t val) {
  this->nameLength = val;
}

const char* ResourceInfoReturnStruct::ascii_fingerprint = "AC9C4895E6FDB4C04F2C42875F33A426";
const uint8_t ResourceInfoReturnStruct::binary_fingerprint[16] = {0xAC,0x9C,0x48,0x95,0xE6,0xFD,0xB4,0xC0,0x4F,0x2C,0x42,0x87,0x5F,0x33,0xA4,0x26};

uint32_t ResourceInfoReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->resourceType = (ResourceType::type)ecast2;
          this->__isset.resourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hResource);
          this->__isset.hResource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPLZ);
          this->__isset.hasPLZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeStart);
          this->__isset.timeStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeEnd);
          this->__isset.timeEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nameLength);
          this->__isset.nameLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResourceInfoReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ResourceInfoReturnStruct");

  if (this->__isset.resourceType) {
    xfer += oprot->writeFieldBegin("resourceType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->resourceType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("hResource", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->hResource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasPLZ", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->hasPLZ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStart", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeStart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeEnd", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timeEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nameLength", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->nameLength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ResourceInfoReturnStruct &a, ResourceInfoReturnStruct &b) {
  using ::std::swap;
  swap(a.resourceType, b.resourceType);
  swap(a.hResource, b.hResource);
  swap(a.hasPLZ, b.hasPLZ);
  swap(a.timeStart, b.timeStart);
  swap(a.timeEnd, b.timeEnd);
  swap(a.nameLength, b.nameLength);
  swap(a.__isset, b.__isset);
}

ResourceInfoReturnStruct::ResourceInfoReturnStruct(const ResourceInfoReturnStruct& other3) {
  resourceType = other3.resourceType;
  hResource = other3.hResource;
  hasPLZ = other3.hasPLZ;
  timeStart = other3.timeStart;
  timeEnd = other3.timeEnd;
  nameLength = other3.nameLength;
  __isset = other3.__isset;
}
ResourceInfoReturnStruct& ResourceInfoReturnStruct::operator=(const ResourceInfoReturnStruct& other4) {
  resourceType = other4.resourceType;
  hResource = other4.hResource;
  hasPLZ = other4.hasPLZ;
  timeStart = other4.timeStart;
  timeEnd = other4.timeEnd;
  nameLength = other4.nameLength;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ResourceInfoReturnStruct& obj) {
  using apache::thrift::to_string;
  out << "ResourceInfoReturnStruct(";
  out << "resourceType="; (obj.__isset.resourceType ? (out << to_string(obj.resourceType)) : (out << "<null>"));
  out << ", " << "hResource=" << to_string(obj.hResource);
  out << ", " << "hasPLZ=" << to_string(obj.hasPLZ);
  out << ", " << "timeStart=" << to_string(obj.timeStart);
  out << ", " << "timeEnd=" << to_string(obj.timeEnd);
  out << ", " << "nameLength=" << to_string(obj.nameLength);
  out << ")";
  return out;
}


RequestPTZControlReturnStruct::~RequestPTZControlReturnStruct() throw() {
}


void RequestPTZControlReturnStruct::__set_hPTZ(const int64_t val) {
  this->hPTZ = val;
}

void RequestPTZControlReturnStruct::__set_result(const int64_t val) {
  this->result = val;
}

void RequestPTZControlReturnStruct::__set_userName(const std::string& val) {
  this->userName = val;
}

const char* RequestPTZControlReturnStruct::ascii_fingerprint = "6B0CD68886A371B59CE1B9EDCF067801";
const uint8_t RequestPTZControlReturnStruct::binary_fingerprint[16] = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

uint32_t RequestPTZControlReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hPTZ);
          this->__isset.hPTZ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestPTZControlReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RequestPTZControlReturnStruct");

  xfer += oprot->writeFieldBegin("hPTZ", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hPTZ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RequestPTZControlReturnStruct &a, RequestPTZControlReturnStruct &b) {
  using ::std::swap;
  swap(a.hPTZ, b.hPTZ);
  swap(a.result, b.result);
  swap(a.userName, b.userName);
  swap(a.__isset, b.__isset);
}

RequestPTZControlReturnStruct::RequestPTZControlReturnStruct(const RequestPTZControlReturnStruct& other5) {
  hPTZ = other5.hPTZ;
  result = other5.result;
  userName = other5.userName;
  __isset = other5.__isset;
}
RequestPTZControlReturnStruct& RequestPTZControlReturnStruct::operator=(const RequestPTZControlReturnStruct& other6) {
  hPTZ = other6.hPTZ;
  result = other6.result;
  userName = other6.userName;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RequestPTZControlReturnStruct& obj) {
  using apache::thrift::to_string;
  out << "RequestPTZControlReturnStruct(";
  out << "hPTZ=" << to_string(obj.hPTZ);
  out << ", " << "result=" << to_string(obj.result);
  out << ", " << "userName=" << to_string(obj.userName);
  out << ")";
  return out;
}


PTZControlReturnStruct::~PTZControlReturnStruct() throw() {
}


void PTZControlReturnStruct::__set_result(const PTZControlReturnType::type val) {
  this->result = val;
__isset.result = true;
}

const char* PTZControlReturnStruct::ascii_fingerprint = "8C1740BBF54FD399631A4549952454DB";
const uint8_t PTZControlReturnStruct::binary_fingerprint[16] = {0x8C,0x17,0x40,0xBB,0xF5,0x4F,0xD3,0x99,0x63,0x1A,0x45,0x49,0x95,0x24,0x54,0xDB};

uint32_t PTZControlReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->result = (PTZControlReturnType::type)ecast7;
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PTZControlReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PTZControlReturnStruct");

  if (this->__isset.result) {
    xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->result);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PTZControlReturnStruct &a, PTZControlReturnStruct &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

PTZControlReturnStruct::PTZControlReturnStruct(const PTZControlReturnStruct& other8) {
  result = other8.result;
  __isset = other8.__isset;
}
PTZControlReturnStruct& PTZControlReturnStruct::operator=(const PTZControlReturnStruct& other9) {
  result = other9.result;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PTZControlReturnStruct& obj) {
  using apache::thrift::to_string;
  out << "PTZControlReturnStruct(";
  out << "result="; (obj.__isset.result ? (out << to_string(obj.result)) : (out << "<null>"));
  out << ")";
  return out;
}

} // namespace
