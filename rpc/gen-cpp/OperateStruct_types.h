/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OperateStruct_TYPES_H
#define OperateStruct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ipcms {

class UserVerificationDataPacket;

class PlayVideoDataPacket;

class ApplyPTZControlDataPacket;


class UserVerificationDataPacket {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  UserVerificationDataPacket(const UserVerificationDataPacket&);
  UserVerificationDataPacket& operator=(const UserVerificationDataPacket&);
  UserVerificationDataPacket() : UserID(), SessionID() {
  }

  virtual ~UserVerificationDataPacket() throw();
  std::string UserID;
  std::string SessionID;

  void __set_UserID(const std::string& val);

  void __set_SessionID(const std::string& val);

  bool operator == (const UserVerificationDataPacket & rhs) const
  {
    if (!(UserID == rhs.UserID))
      return false;
    if (!(SessionID == rhs.SessionID))
      return false;
    return true;
  }
  bool operator != (const UserVerificationDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserVerificationDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserVerificationDataPacket& obj);
};

void swap(UserVerificationDataPacket &a, UserVerificationDataPacket &b);

typedef struct _PlayVideoDataPacket__isset {
  _PlayVideoDataPacket__isset() : hResource(false), time(false), speed(false) {}
  bool hResource :1;
  bool time :1;
  bool speed :1;
} _PlayVideoDataPacket__isset;

class PlayVideoDataPacket {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  PlayVideoDataPacket(const PlayVideoDataPacket&);
  PlayVideoDataPacket& operator=(const PlayVideoDataPacket&);
  PlayVideoDataPacket() : hResource(0), time(0), speed(0) {
  }

  virtual ~PlayVideoDataPacket() throw();
  int64_t hResource;
  int64_t time;
  int32_t speed;

  _PlayVideoDataPacket__isset __isset;

  void __set_hResource(const int64_t val);

  void __set_time(const int64_t val);

  void __set_speed(const int32_t val);

  bool operator == (const PlayVideoDataPacket & rhs) const
  {
    if (!(hResource == rhs.hResource))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(speed == rhs.speed))
      return false;
    return true;
  }
  bool operator != (const PlayVideoDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayVideoDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlayVideoDataPacket& obj);
};

void swap(PlayVideoDataPacket &a, PlayVideoDataPacket &b);

typedef struct _ApplyPTZControlDataPacket__isset {
  _ApplyPTZControlDataPacket__isset() : hPLZ(false), type(false) {}
  bool hPLZ :1;
  bool type :1;
} _ApplyPTZControlDataPacket__isset;

class ApplyPTZControlDataPacket {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  ApplyPTZControlDataPacket(const ApplyPTZControlDataPacket&);
  ApplyPTZControlDataPacket& operator=(const ApplyPTZControlDataPacket&);
  ApplyPTZControlDataPacket() : hPLZ(0), type(0) {
  }

  virtual ~ApplyPTZControlDataPacket() throw();
  int64_t hPLZ;
  int32_t type;

  _ApplyPTZControlDataPacket__isset __isset;

  void __set_hPLZ(const int64_t val);

  void __set_type(const int32_t val);

  bool operator == (const ApplyPTZControlDataPacket & rhs) const
  {
    if (!(hPLZ == rhs.hPLZ))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ApplyPTZControlDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyPTZControlDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ApplyPTZControlDataPacket& obj);
};

void swap(ApplyPTZControlDataPacket &a, ApplyPTZControlDataPacket &b);

} // namespace

#endif
