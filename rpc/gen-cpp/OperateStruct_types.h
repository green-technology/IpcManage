/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OperateStruct_TYPES_H
#define OperateStruct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ipcms {

struct PTZCommand {
  enum type {
    PTZ_UP = 0,
    PTZ_DOWN = 1,
    PTZ_LEFT = 2,
    PTZ_RIGHT = 3,
    PTZ_ZOOM_ADD = 4,
    PTZ_ZOOM_DEC = 5,
    PTZ_FOCUS_ADD = 6,
    PTZ_FOCUS_DEC = 7,
    PTZ_APERTURE_ADD = 8,
    PTZ_APERTURE_DEC = 9,
    PTZ_POINT_MOVE = 10,
    PTZ_POINT_SET = 11,
    PTZ_LAMP_OPEN = 12,
    PTZ_LAMP_CLOSE = 13,
    PTZ_WIPER_OPEN = 14,
    PTZ_WIPER_CLOSE = 15,
    PTZ_THROUGHFOG_OPEN = 16,
    PTZ_THROUGHFOG_CLOSE = 17,
    PTZ_DEV_OPEN = 18,
    PTZ_DEV_CLOSE = 19,
    PTZ_LEFTUP = 20,
    PTZ_RIGHTUP = 21,
    PTZ_LEFTDOWN = 22,
    PTZ_RIGHTDOWN = 23,
    PTZ_MAX_COMMAND = 24
  };
};

extern const std::map<int, const char*> _PTZCommand_VALUES_TO_NAMES;

class UserVerificationDataPacket;

class PlayVideoDataPacket;

class RequestPTZControlDataPacket;

class PTZControlDataPacket;


class UserVerificationDataPacket {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  UserVerificationDataPacket(const UserVerificationDataPacket&);
  UserVerificationDataPacket& operator=(const UserVerificationDataPacket&);
  UserVerificationDataPacket() : UserID(), SessionID() {
  }

  virtual ~UserVerificationDataPacket() throw();
  std::string UserID;
  std::string SessionID;

  void __set_UserID(const std::string& val);

  void __set_SessionID(const std::string& val);

  bool operator == (const UserVerificationDataPacket & rhs) const
  {
    if (!(UserID == rhs.UserID))
      return false;
    if (!(SessionID == rhs.SessionID))
      return false;
    return true;
  }
  bool operator != (const UserVerificationDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserVerificationDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserVerificationDataPacket& obj);
};

void swap(UserVerificationDataPacket &a, UserVerificationDataPacket &b);

typedef struct _PlayVideoDataPacket__isset {
  _PlayVideoDataPacket__isset() : hResource(false), time(false), speed(false) {}
  bool hResource :1;
  bool time :1;
  bool speed :1;
} _PlayVideoDataPacket__isset;

class PlayVideoDataPacket {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  PlayVideoDataPacket(const PlayVideoDataPacket&);
  PlayVideoDataPacket& operator=(const PlayVideoDataPacket&);
  PlayVideoDataPacket() : hResource(0), time(0), speed(0) {
  }

  virtual ~PlayVideoDataPacket() throw();
  int64_t hResource;
  int64_t time;
  int32_t speed;

  _PlayVideoDataPacket__isset __isset;

  void __set_hResource(const int64_t val);

  void __set_time(const int64_t val);

  void __set_speed(const int32_t val);

  bool operator == (const PlayVideoDataPacket & rhs) const
  {
    if (!(hResource == rhs.hResource))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(speed == rhs.speed))
      return false;
    return true;
  }
  bool operator != (const PlayVideoDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayVideoDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlayVideoDataPacket& obj);
};

void swap(PlayVideoDataPacket &a, PlayVideoDataPacket &b);

typedef struct _RequestPTZControlDataPacket__isset {
  _RequestPTZControlDataPacket__isset() : hResource(false) {}
  bool hResource :1;
} _RequestPTZControlDataPacket__isset;

class RequestPTZControlDataPacket {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  RequestPTZControlDataPacket(const RequestPTZControlDataPacket&);
  RequestPTZControlDataPacket& operator=(const RequestPTZControlDataPacket&);
  RequestPTZControlDataPacket() : hResource(0) {
  }

  virtual ~RequestPTZControlDataPacket() throw();
  int64_t hResource;

  _RequestPTZControlDataPacket__isset __isset;

  void __set_hResource(const int64_t val);

  bool operator == (const RequestPTZControlDataPacket & rhs) const
  {
    if (!(hResource == rhs.hResource))
      return false;
    return true;
  }
  bool operator != (const RequestPTZControlDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPTZControlDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RequestPTZControlDataPacket& obj);
};

void swap(RequestPTZControlDataPacket &a, RequestPTZControlDataPacket &b);

typedef struct _PTZControlDataPacket__isset {
  _PTZControlDataPacket__isset() : hPTZ(false), command(false), param1(false), param2(false), param3(false), dwStop(false) {}
  bool hPTZ :1;
  bool command :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool dwStop :1;
} _PTZControlDataPacket__isset;

class PTZControlDataPacket {
 public:

  static const char* ascii_fingerprint; // = "DD286DAE592A0D22FD0D778DC127B125";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x28,0x6D,0xAE,0x59,0x2A,0x0D,0x22,0xFD,0x0D,0x77,0x8D,0xC1,0x27,0xB1,0x25};

  PTZControlDataPacket(const PTZControlDataPacket&);
  PTZControlDataPacket& operator=(const PTZControlDataPacket&);
  PTZControlDataPacket() : hPTZ(0), command((PTZCommand::type)0), param1(0), param2(0), param3(0), dwStop(0) {
  }

  virtual ~PTZControlDataPacket() throw();
  int64_t hPTZ;
  PTZCommand::type command;
  int64_t param1;
  int64_t param2;
  int64_t param3;
  bool dwStop;

  _PTZControlDataPacket__isset __isset;

  void __set_hPTZ(const int64_t val);

  void __set_command(const PTZCommand::type val);

  void __set_param1(const int64_t val);

  void __set_param2(const int64_t val);

  void __set_param3(const int64_t val);

  void __set_dwStop(const bool val);

  bool operator == (const PTZControlDataPacket & rhs) const
  {
    if (!(hPTZ == rhs.hPTZ))
      return false;
    if (__isset.command != rhs.__isset.command)
      return false;
    else if (__isset.command && !(command == rhs.command))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(dwStop == rhs.dwStop))
      return false;
    return true;
  }
  bool operator != (const PTZControlDataPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PTZControlDataPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PTZControlDataPacket& obj);
};

void swap(PTZControlDataPacket &a, PTZControlDataPacket &b);

} // namespace

#endif
