// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>

#include <iostream>
#include <stdexcept>
#include <sstream>

#include "IpcManageServerHandler.h"

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::ipcms;
//using namespace  shared;


int main(int argc, char **argv) {
	
	boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	boost::shared_ptr<IpcManageServerHandler> handler(new IpcManageServerHandler());
	boost::shared_ptr<TProcessor> processor(new IpcManageServerProcessor(handler));
	boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(9090));
	boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());

	/*const int workCount = 4;

	boost::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(workCount);
	boost::shared_ptr<PosixThreadFactory> threadFactory = boost::shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();*/

	/*TThreadPoolServer server(processor,
		serverTransport,
		transportFactory,
		protocolFactory,
		threadManager);*/
	TThreadedServer server(processor,
		serverTransport,
		transportFactory,
		protocolFactory);

	cout << "Starting the server...." << endl;
	server.serve();

	cout << "Done.. " <<endl;



	/*int port = 9090;
	shared_ptr<IpcManageServerHandler> handler(new IpcManageServerHandler());
	shared_ptr<TProcessor> processor(new IpcManageServerProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();*/


  return 0;
}

