// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "glog\logging.h"

//#undef basic_ostream

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>

#include <iostream>
#include <stdexcept>
#include <sstream>

#include "IpcManageServerHandler.h"

#include "getopt.h"

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::ipcms;
//using namespace  shared;

static void InstallService(char* inServiceName);
static void RemoveService(char *inServiceName);
static void RunAsService(char* inServiceName);
static SERVICE_STATUS_HANDLE sServiceStatusHandle = 0;
void __stdcall ServiceMain(DWORD /*argc*/, LPTSTR *argv);
void RunServer(char** argv);

int main(int argc, char **argv) {
	bool IsService=false;

	int ch;
	while ((ch = getopt(argc,argv, "vdxp:o:c:irsS:I")) != EOF)
	{
		switch(ch)
		{
		case 'i':
			printf("Installing the IpcManage service...\n");
			::InstallService("IpcManage");
			printf("Starting the IpcManage...\n");
			::RunAsService("IpcManage");
			::exit(0);
			break;
		case 'r':
			printf("Removing the IpcManage service...\n");
			::RemoveService("IpcManage");
			::exit(0);
		case 's':
			printf("Starting the IpcManage service...\n");
			::RunAsService("IpcManage");
			::exit(0);
		case 'd':
			IsService=true;
			break;
		default:
			break;
		}
	}

	if(IsService)
	{
		///BOOL ret =SetProcessShutdownParameters(0x3ff, SHUTDOWN_NORETRY);
		//BOOL ret =SetConsoleCtrlHandler( (PHANDLER_ROUTINE) ctrlhandler, TRUE );
		RunServer(argv);
		::exit(0);
	}
	else
	{
		SERVICE_TABLE_ENTRY dispatchTable[] =
		{
			{ "", ServiceMain },
			{ NULL, NULL }
		};

		printf("IpcManage must either be started from the DOS Console\n");
		printf("using the -d command-line option, or using the Service Control Manager\n\n");
		printf("Waiting for the Service Control Manager to start IpcManage...\n");
		BOOL theErr = ::StartServiceCtrlDispatcher(dispatchTable);
		if (!theErr)
		{
			printf("Fatal Error: Couldn't start Service\n");
			::exit(-1);
		}
	}
	return 0;
}

void RunAsService(char* inServiceName)
{
	SC_HANDLE   theService;
	SC_HANDLE   theSCManager;

	theSCManager = ::OpenSCManager(
		NULL,                   // machine (NULL == local)
		NULL,                   // database (NULL == default)
		SC_MANAGER_ALL_ACCESS   // access required
		);
	if (!theSCManager)
		return;

	theService = ::OpenService(
		theSCManager,               // SCManager database
		inServiceName,               // name of service
		SERVICE_ALL_ACCESS );

	SERVICE_STATUS lpServiceStatus;

	if (theService)
	{   const signed long kNotRunning = 1062;
	unsigned short stopped = ::ControlService(theService, SERVICE_CONTROL_STOP, &lpServiceStatus);
	if(!stopped && ( (signed long) ::GetLastError() != kNotRunning) )
		printf("Stopping Service Error: %d\n", ::GetLastError());

	unsigned short started = ::StartService(theService, 0, NULL);
	if(!started)
		printf("Starting Service Error: %d\n", ::GetLastError());

	::CloseServiceHandle(theService);
	}

	::CloseServiceHandle(theSCManager);
}


void InstallService(char* inServiceName)
{
	SC_HANDLE   theService;
	SC_HANDLE   theSCManager;

	TCHAR thePath[512];
	TCHAR theQuotedPath[522];

	BOOL theErr = ::GetModuleFileName( NULL, thePath, 512 );
	if (!theErr)
		return;

	sprintf_s(theQuotedPath, "\"%s\"", thePath);

	theSCManager = ::OpenSCManager(
		NULL,                   // machine (NULL == local)
		NULL,                   // database (NULL == default)
		SC_MANAGER_ALL_ACCESS   // access required
		);
	if (!theSCManager)
	{
		printf("Failed to install IpcManage Service\n");
		return;
	}

	theService = CreateService(
		theSCManager,               // SCManager database
		inServiceName,               // name of service
		inServiceName,               // name to display
		SERVICE_ALL_ACCESS,         // desired access
		SERVICE_WIN32_OWN_PROCESS,  // service type
		SERVICE_AUTO_START,       // start type
		SERVICE_ERROR_NORMAL,       // error control type
		theQuotedPath,               // service's binary
		NULL,                       // no load ordering group
		NULL,                       // no tag identifier
		NULL,       // dependencies
		NULL,                       // LocalSystem account
		NULL);                      // no password

	if (theService)
	{
		::CloseServiceHandle(theService);
		printf("Installed IpcManage Service\n");
	}
	else
		printf("Failed to install IpcManage Service\n");

	::CloseServiceHandle(theSCManager);
}

void RemoveService(char *inServiceName)
{
	SC_HANDLE   theSCManager;
	SC_HANDLE   theService;

	theSCManager = ::OpenSCManager(
		NULL,                   // machine (NULL == local)
		NULL,                   // database (NULL == default)
		SC_MANAGER_ALL_ACCESS   // access required
		);
	if (!theSCManager)
	{
		std::printf("Failed to remove IpcManage Service\n");
		return;
	}

	theService = ::OpenService(theSCManager, inServiceName, SERVICE_ALL_ACCESS);
	if (theService != NULL)
	{
		unsigned short stopped = ::ControlService(theService, SERVICE_CONTROL_STOP, NULL);
		if(!stopped)
			printf("Stopping Service Error: %d\n", ::GetLastError());

		(void)::DeleteService(theService);
		::CloseServiceHandle(theService);
		printf("Removed IpcManage Service\n");
	}
	else
		printf("Failed to remove IpcManage Service\n");

	::CloseServiceHandle(theSCManager);  
}

void ReportStatus(DWORD inCurrentState, DWORD inExitCode)
{
	static unsigned short sFirstTime = 1;
	static unsigned long sCheckpoint = 0;
	static SERVICE_STATUS sStatus;

	if(sFirstTime)
	{
		sFirstTime = false;

		//
		// Setup the status structure
		sStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
		sStatus.dwCurrentState = SERVICE_START_PENDING;
		//sStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_SHUTDOWN;
		sStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP;
		sStatus.dwWin32ExitCode = 0;
		sStatus.dwServiceSpecificExitCode = 0;
		sStatus.dwCheckPoint = 0;
		sStatus.dwWaitHint = 0;
	}

	if (sStatus.dwCurrentState == SERVICE_START_PENDING)
		sStatus.dwCheckPoint = ++sCheckpoint;
	else
		sStatus.dwCheckPoint = 0;

	sStatus.dwCurrentState = inCurrentState;
	sStatus.dwServiceSpecificExitCode = inExitCode;
	BOOL theErr = SetServiceStatus(sServiceStatusHandle, &sStatus);
	if (theErr == 0)
	{
		DWORD theerrvalue = ::GetLastError();
	}
}

static DWORD _threadIDMain=NULL;
void WINAPI ServiceControl(DWORD inControlCode)
{
	DWORD theStatusReport = SERVICE_START_PENDING;
	switch(inControlCode)
	{
		// Stop the service.
		//
	case SERVICE_CONTROL_STOP:
	case SERVICE_CONTROL_SHUTDOWN:
		theStatusReport = SERVICE_STOP_PENDING;
		PostThreadMessage(_threadIDMain,WM_QUIT,NULL,NULL);
		break;
	default:
		theStatusReport = SERVICE_RUNNING;
		break;
	}
	::ReportStatus(theStatusReport, NO_ERROR);
}

void __stdcall ServiceMain(DWORD /*argc*/, LPTSTR *argv)
{    
#ifdef _DEBUG
	Sleep(10000);
#endif

	char* theServerName = argv[0];
	sServiceStatusHandle = ::RegisterServiceCtrlHandler( theServerName, &ServiceControl);
	if (sServiceStatusHandle == 0)
	{
		printf("Failure registering service handler");
		return;
	}

	::ReportStatus( SERVICE_RUNNING, NO_ERROR );
	HRESULT hr= CoInitialize(NULL);
	_threadIDMain = GetCurrentThreadId();
	RunServer(argv);
	CoUninitialize();
	::ReportStatus( SERVICE_STOPPED, NO_ERROR );
}

void RunServer(char** argv)
{
	google::InitGoogleLogging(argv[0]);
	google::LogToStderr();
	LOG(INFO) << "GLOG START";

	boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	boost::shared_ptr<IpcManageServerHandler> handler(new IpcManageServerHandler());
	boost::shared_ptr<TProcessor> processor(new IpcManageServerProcessor(handler));
	boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(9090));
	boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());

	TThreadedServer server(processor,
		serverTransport,
		transportFactory,
		protocolFactory);

	cout << "Starting the server...." << endl;
	server.serve();

	cout << "Done.. " <<endl;

	google::ShutdownGoogleLogging();
}


